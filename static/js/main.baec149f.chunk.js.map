{"version":3,"sources":["components/TempoForm.js","util/constants.js","components/Table.js","components/Calculator.js","components/Record.js","App.js","serviceWorker.js","index.js","img/gold-record.png"],"names":["TempoForm","_ref","tempo","onTempoChange","react_default","a","createElement","className","type","value","onChange","DIVISIONS_LIST","Table","heading","data","formatter","clickHandler","colSpan","key","Object","entries","map","_ref2","_ref3","slicedToArray","division","onClick","TimeTable","_ref4","timeTable","columns","copyToClipboard","_ref5","innerHTML","target","textField","document","innerText","body","appendChild","select","execCommand","remove","_ref6","_ref7","id","Table_Table","text","emptyMap","Immutable","Map","Calculator","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleTempoChange","bind","assertThisInitialized","event","setState","Number","types","reduce","factor","set","beats","divisor","divisions","beat","get","d","calculate","toJS","toFixed","formatPlaces","calculateTable","components_TempoForm","components_Table","React","Component","note","triplet","dotted","Record","src","record","alt","DelayCalculator","components_Record","components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.baec149f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  tempo: PropTypes.number.isRequired,\n  onTempoChange: PropTypes.func.isRequired,\n}\n\nfunction TempoForm({ tempo, onTempoChange }) {\n  return (\n    <div className=\"tempo-form\">\n      <form>\n        <label>\n          TEMPO:\n        </label>\n        <input\n          type=\"number\"\n          value={tempo}\n          onChange={onTempoChange}\n        />\n        </form>\n    </div>\n  );\n}\nTempoForm.propTypes = propTypes;\n\nexport default TempoForm;\n","// amount of milliseconds in one minute (60,000)\nconst MINUTE_MILLISECONDS = 60 * 1000;\n// amount of decimal places to round formatted values to\nconst FORMAT_PLACES = 4;\n// fractional beat divisions\nconst DIVISIONS_LIST = [1, 2, 4, 8, 16, 32, 64, 128, 256];\n// definition of beat types as columns\nconst COLUMNS = {\n  note: { text: 'BEATS', factor: 1 },\n  triplet: { text: 'TRIPLETS', factor: 2 / 3 },\n  dotted: { text: 'DOTTED', factor: 3 / 2 },\n}\n\nexport {\n  MINUTE_MILLISECONDS,\n  FORMAT_PLACES,\n  DIVISIONS_LIST,\n  COLUMNS,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Immutable from 'immutable';\n\nimport { DIVISIONS_LIST } from '../util/constants';\n\nconst emptyMap = new Immutable.Map();\n/**\n * A map of propTypes based on the DIVISIONS_LIST constant\n * {\n *    1: PropTypes.number.isRequired,\n *    2: PropTypes.number.isRequired,\n *    ...\n *    128: PropTypes.number.isRequired,\n * }\n */\nconst divisionShape = DIVISIONS_LIST.reduce((map, d) => (map.set(d, PropTypes.number.isRequired)), emptyMap).toJS();\n\n/* BASIC TABLE COMPONENT */\nconst tablePropTypes = {\n  heading: PropTypes.string.isRequired,\n  data: PropTypes.shape(divisionShape).isRequired,\n}\nconst Table = ({ heading, data, formatter, clickHandler }) => {\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <th colSpan=\"2\" key={heading}>\n            {heading}\n          </th>\n        </tr>\n        {Object.entries(data).map(([division, value]) => (\n          <tr key={heading + division + \"row\"}>\n            <td key={heading + division}>\n              1/{division}:\n              </td>\n            <td key={value}>\n              <span onClick={clickHandler} className=\"clickable\">{formatter(value)}</span> ms\n              </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n};\nTable.propTypes = tablePropTypes;\n\n/** DISPLAY TABLE COMPONENT */\nconst timeTablePropTypes = {\n  timeTable: PropTypes.shape({\n    dotted: PropTypes.shape(divisionShape).isRequired,\n    note: PropTypes.shape(divisionShape).isRequired,\n    triplet: PropTypes.shape(divisionShape).isRequired,\n  }).isRequired,\n};\n\nfunction TimeTable({ timeTable, columns, formatter }) {\n\n  const copyToClipboard = ({ target: { innerHTML } }) => {\n    const textField = document.createElement('textarea');\n    textField.innerText = innerHTML;\n    document.body.appendChild(textField)\n    textField.select()\n    document.execCommand('copy')\n    textField.remove()\n  };\n\n  return (\n    <div className=\"timeTable\">\n      {Object.entries(timeTable).map(([id, data]) => (\n        <Table\n          key={columns[id].text}\n          heading={columns[id].text}\n          data={data}\n          formatter={formatter}\n          clickHandler={copyToClipboard}\n        />\n      ))}\n    </div>\n  );\n}\nTimeTable.propTypes = timeTablePropTypes;\n\nexport default TimeTable;\n","import React from 'react';\nimport Immutable from 'immutable';\n\nimport TempoForm from './TempoForm';\nimport TimeTable from './Table';\n\nimport {\n    MINUTE_MILLISECONDS,\n    FORMAT_PLACES,\n    DIVISIONS_LIST,\n    COLUMNS,\n} from '../util/constants';\n\nconst emptyMap = new Immutable.Map();\n\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { tempo: 120 };\n\n        this.handleTempoChange = this.handleTempoChange.bind(this);\n    }\n\n    // number of decimal places to round values to\n    static formatPlaces = FORMAT_PLACES;\n    static columns = COLUMNS;\n\n    handleTempoChange(event) {\n        this.setState({ tempo: Number(event.target.value) });\n    }\n\n    calculateTable(tempo) {\n        // beat types and their corresponding multiplier constants\n        const types = Object.entries(Calculator.columns)\n            .reduce((map, [id, { factor }]) => (\n                map.set(id, factor)), emptyMap\n            )\n\n\n        // map of beat types to divisions\n        const beats = types.reduce((map, divisor, type) => (map.set(type, DIVISIONS_LIST)), emptyMap);\n\n        const calculate = (tempo, type, divisions) => {\n            const beat = MINUTE_MILLISECONDS / tempo;\n\n            const divisor = types.get(type);\n\n            return divisions.reduce((map, d) => (map.set(d, (beat / d) * 4 * divisor)), emptyMap);\n        };\n\n        return beats.reduce((map, divisions, type) => (\n            map.set(type, calculate(tempo, type, DIVISIONS_LIST))\n        ), emptyMap).toJS();\n    };\n\n    formatter(value) {\n        return value.toFixed(Calculator.formatPlaces);\n    }\n\n    render() {\n        const timeTable = this.calculateTable(this.state.tempo);\n\n        return (\n            <div className=\"calculator\">\n                <TempoForm\n                    tempo={this.state.tempo}\n                    onTempoChange={this.handleTempoChange}\n                />\n                <TimeTable\n                    timeTable={timeTable}\n                    columns={Calculator.columns}\n                    formatter={this.formatter}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport record from '../img/gold-record.png';\n\nfunction Record() {\n  return (\n    <img className=\"record\" src={record} alt=\"gold record\"></img>\n  )\n}\n\nexport default Record;\n","import React from 'react';\n\nimport './App.scss';\n\nimport Calculator from './components/Calculator';\nimport Record from './components/Record';\n\nfunction DelayCalculator() {\n  return (\n    <div className=\"delay-calc\">\n      <header className=\"header\">\n        <h1>\n          <div className=\"grid\">\n            <Record />\n            <span className=\"text\">DELAY</span>\n            <Record />\n            <span className=\"text calc\">CALCULATOR</span>\n          </div>\n        </h1>\n      </header>\n      <div className=\"body\">\n        <Calculator />\n      </div>\n    </div>\n  );\n}\n\nexport default DelayCalculator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/gold-record.c1294b90.png\";"],"sourceRoot":""}